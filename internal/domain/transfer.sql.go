// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transfer.sql

package domain

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO
    transfer (from_account_id, to_account_id, amount)
VALUES
    ($1, $2, $3) RETURNING id, from_account_id, to_account_id, amount, created_at, updated_at
`

type CreateTransferParams struct {
	FromAccountID int64
	ToAccountID   int64
	Amount        int32
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListTransfer = `-- name: GetListTransfer :many
SELECT
    id, from_account_id, to_account_id, amount, created_at, updated_at
FROM
    transfer
`

func (q *Queries) GetListTransfer(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getListTransfer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfer = `-- name: GetTransfer :one
SELECT
    id, from_account_id, to_account_id, amount, created_at, updated_at
FROM 
    transfer
WHERE
    id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
